type User @entity {
  "address"
  id: ID!
  seeds: [Seed!]! @derivedFrom(field: "owner")
  pottedPlants: [PottedPlant!]! @derivedFrom(field: "owner")
  seedCount: BigInt!
  ticketCount: BigInt!
  potCount: BigInt!
  waterCount: BigInt!
  fertilizerCount: BigInt!
#  activeUserOptions: [UserOption!]!
#  tokenBalances: [TokenBalance!]! @derivedFrom(field: "user")
#  userMatches: [UserMatch!]! @derivedFrom(field: "user")
#  userOptions: [UserOption!]! @derivedFrom(field: "user")
}

type PottedPlant @entity {
  "tokenId"
  id: ID!
  owner: User!
  seed: Seed!
  born: Int!
  bornBlock: Int!
  growth: Int!
}

type ShrubNFT @entity {
  "tokenId"
  id: ID!
  owner: User!
  name: String!
  dna: Int!
  emotion: String!
  born: Int!
  bornBlock: Int!
}

type Seed @entity {
  "tokenId"
  id: ID!
  owner: User!
  type: String!
  unmoved: Boolean!
  virgin: Boolean!
  dna: Int!
  name: String!
  emotion: String!
  born: Int!
  bornBlock: Int!
#  Having a pottedPlant means that the seed has been planted
  pottedPlant: PottedPlant
#  approval: Exchange!
}

type Exchange @entity {
  "address"
  id: ID!
}

type TypeStat @entity {
  "type"
  id: ID!
  claimed: Int!
  unmoved: Int!
  virgin: Int!
}

type AdoptionRecord @entity {
  "tokenId"
  id: ID!
  seed: Seed!
  user: User!
  block: Int!
  timestamp: Int!
}
